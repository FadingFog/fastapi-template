[project]
name = "fastapi-template"
version = "0.1.0"
description = ""
authors = [
    {name = "FadingFog"}
]
readme = "README.md"
requires-python = "==3.13.2"
dynamic = [ "dependencies" ]

[tool.poetry.dependencies]
uvicorn = {extras = ["standard"], version = "0.34.0"}
fastapi = "0.115.8"
fastapi-pagination = "0.12.34"
fastapi-filter = "2.0.1"
pydantic = "2.10.6"
pydantic-settings = "2.7.1"
alembic = "^1.14.1"
sqlalchemy = "^2.0.38"
asyncpg = "^0.30.0"
structlog = "^25.1.0"
orjson = "^3.10.15"

[tool.poetry.group.dev.dependencies]
ruff = "^0.9.6"
mypy = "^1.15.0"
pre-commit = "^4.1.0"
pytest = "^8.3.4"
pytest-asyncio = "^0.25.3"
pytest-env = "^1.1.5"
pytest-mock = "^3.14.0"


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = "tests"
filterwarnings = [
    "ignore::DeprecationWarning:fastapi_filter.contrib.sqlalchemy.filter",
    "ignore::RuntimeWarning",
    "ignore::DeprecationWarning"
]

[tool.ruff]
line-length = 120
target-version = "py313"
lint.select = [
    "E",   # Enable error codes checks
    "F",   # Enable checks for source files errors
    "W",   # Enable linter warnings
    "I",   # Enable Isort related checks
    "N",   # Enable pep8-naming conventions
    "RSE", # Enable `unnecessary parentheses on raised exception` check
    "RET", # Enable `return` checks
    "T20", # Enable `print found` checks
    "PIE"  # Enable `specific` checks: https://docs.astral.sh/ruff/rules/#flake8-pyi-pyi
]
lint.ignore = [
    "N802", # Function name should be lowercase. Stick to gRPC generation tools -> use PascalCase methods.
    "N805", # First argument of a method should be named `self`. Conflict with Pydantic validators.
    "N999", # Invalid module name. Alembic autogenerate `incorrect` migrations.
]
format.quote-style = "double"

[tool.mypy]
python_version = 3.13
exclude = ["tests", "app/db/migrations"]
files = ["app"]
disable_error_code = [
    "no-redef", "return", "return-value", "var-annotated", "import", "assignment", "call-arg", "arg-type", "list-item"
]
follow_imports = "silent"
ignore_missing_imports = true
check_untyped_defs = true


[[tool.mypy.overrides]]
module = "tests.*"
disable_error_code = "assignment,arg-type,no-untyped-def"
